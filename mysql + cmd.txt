create user my_user@'%' identified by '1111';

@는 위치를 나타내는 것
%는 어디서나 다 접속할 수 있는 것
identified by는 비밀번호는
1111 이야

create database test_db;

grant all privileges on test_db.* to my_user@'%' with grant option;

: root가 가지고 있는 my_user가 모든 권한을 test_db에 한정되도록 부여한다
다른 사용자에게도 위임할 수 있도록 with를 씀

cls는 창에 있는 내용을 깔끔하게 지움

mysql -umy_user -p
1111

use test_db;

create table teacher (
t_id bigint primary key auto_increment,
name varchar(30) not null,
belong varchar(20) default 'COMPUTER',
phone varchar(20)
);
// primary key 가 명시가 되어있지만

show tables;
drop table teacher;

create table teacher (
t_id bigint auto_increment,
name varchar(30) not null,
belong varchar(20) default 'COMPUTER',
phone varchar(20),
primary key (t_id)
);
// primary key 를 밑에 넣었으니
// 옆에 괄호열고 명시를 해줘야함

show tables;

rename table teacher to professor;

show tables;


INSERT INTO professor
(name, belong, phone)
VALUES('유재석', 'COMPUTER','01012345678');

INSERT INTO professor
(name, belong, phone)
VALUES('손흥민', 'SPORTS', '01021342443');

INSERT INTO professor
(name, belong, phone)
VALUES('장원영', 'DANCE', '01023424343');

INSERT INTO professor
(name, belong, phone)
VALUES('호날두', 'ENGLISH', '01034343222');

INSERT INTO professor
(name, belong, phone)
VALUES('김형민','COMPUTER', '01023432432');

select % from professor;

delete from professor;

select * from professor;

INSERT INTO professor (name, belong, phone)
VALUES
('유재석', 'COMPUTER','01012345678'),
('손흥민', 'SPORTS', '01021342443'),
('장원영', 'DANCE', '01023424343'),
('호날두', 'ENGLISH', '01034343222'),
('김형민','COMPUTER', '01023432432');

source C:\soyeon\mysql\professor_data.sql

exit

chcp

chcp65001

mysql -umy_user -p
1111

show databases;

use test_db;

source C:\soyeon\mysql\professor_data.sql

select * from professor;

// student를 프라이머리키로 수정하는 작업

source C:\soyeon\mysql\student_data.sql

select * from student;

desc student;

alter table student
-> add primary key (s_id);
//테이블을 만들어놓고 수정하는
// s_id를 PK로 수정

desc student;

select * from professor;

select * from student;

select name, phone from student;

select name as '이름', phone as '전화' from student;
//별칭

select * from student;
//기본키에 대한 색인이 만들어짐
//정렬을 하지 않으면 색인 순서대로 출력됨

select name as NAME from student order by name asc;
// 정렬은 = order by 오름차순

select name as NAME from student order by name desc;
// 내림차순

select name, belong from student order by name asc;

select * from student where belong = 'dance';
// dance는 문자열이므로  ''가 필요

select * from student 
where belong = 'music'
order by name desc;

select name, belong from student
where belong = 'computer' or belong = 'sports'
order by s_id desc;

select s_id, name, belong from student
where belong = 'computer' or belong = 'sports'
order by s_id desc;
// belong이 computer 또는 sports 인 사람들의 name과 belong 출력 s_id에 대해서 내림차순

select * from student;

select * from student
where name like '__';

select * from student
where name like '%제%';

select * from student
where s_id like '2009%';

select * from student
where status >=2 and status <=3;

select * from student
where status between 2 and 3;

// belong이 computer이면서 
// status가 2와 3 사이의 데이터를 
// 이름에 대해서 내림차순으로

select * from student
where belong = 'computer' and
status between 2 and 3
order by name desc;

// belong 이 dance 또는 music 인
// 레코드의 s_id = ID, name = 이름,
// belong as 소속으로 출력하되,
// 소속에 대해 오른차순으로 정렬합니다.

select s_id as ID, name as '이름', belong as '소속'
from student
where belong = 'dance' or belong = 'music'
order by belong asc;

select s_id as ID, name as '이름', belong as '소속'
from student
where belong = 'dance' or belong = 'music'
order by belong asc, name asc;

select s_id as ID, name as '이름', belong as '소속'
from student 
where belong = ('dance', 'music')
order by belong asc, name asc;

delete from student
where name = '신동';
----------------------------------------------------
SELECT 필드 1, 필드 2, 필드 3 FROM 테이블명
WHERE 조건 // 크다, 작다, 같지 않다, 등등 -> delete, update할때 항상 씀
ORDER BY 필드 asc / desc // 정렬하는 것
limit 값 1, 값 2;
// 가장 기본적인 Query 구문

WHERE 필드 < 값 >, <, <=, >=,  !=, <>, =, and, or, not
WHERE 필드 in (값1, 값2) // 포함하는 것들을 찾음
WHERE 필드 Between A and B;
WHERE 필드 like '%값%' 
// WHERE 구문을 얼마나 잘 쓰느냐에 따라서 내가 원하는 걸 잘 가져올 수 있음
// WHERE는 한번만 선언되고 정렬되어 출력됨
-------------------------------------------------------
Like '구문'
wild card 문자 (%,_)
* == % : 없는 것 ~ 전부
? == _ : 무조건 자리를 갖는 한글자

selet name, belong from student
WHERE name Like '%김%'
//글자에 김이 들어가있는 사람 모두 포함

selet name, belong from student
WHERE name Like '김%'
//김자로 시작하는 사람

selet name, belong from student
WHERE name Like '%김'
// 김으로 끝나는 사람

selet name, belong from student
WHERE name Like '%서울%'
WHERE name Like '_'
// 이름이 한글자인 사람만 찾음

selet name, belong from student
WHERE name Like '%서울%'
WHERE name Like '__'
// 이름이 두글자인 사람만 찾음
--------------------------------------
between 1 and 3
------------------------------------
status in (1,2)
-------------------------------------