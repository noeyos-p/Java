250721

mysql -uroot -p
1111

show databases;

create database selfjoin_db;

use selfjoin_db;

create table employee(
id int primary key auto_increment,
name varchar(20),
superior_id int
);

desc employee;

insert into employee (name, superior_id)
values 
('김사장', NULL),
('정과장', 1),
('최대리', 2),
('이대리', 2),
('박고문', NULL);

select * from employee;
+----+--------+-------------+
| id | name   | superior_id |
+----+--------+-------------+
|  1 | 김사장 |        NULL |
|  2 | 정과장 |           1 |
|  3 | 최대리 |           2 |
|  4 | 이대리 |           2 |
|  5 | 박고문 |        NULL |
+----+--------+-------------+
// 박고문과 김사장은 상사가 없음
// 자신의 상사를 표시함
// ex) 정과장은 -> 김사장이 상사

+----+--------+-------------+
| id | name   | 상사 |
+----+--------+-------------+
|  2 | 정과장 | 김사장 |
|  3 | 최대리 | 정과장 |
|  4 | 이대리 | 정과장 |
+----+--------+-------------+
// 이렇게 출력하고 싶음
// employee 테이블 각각 join을 하면 됨
// 동일한 테이블의 컬럼끼리 랩핑을 시킴

select emp1.id, emp1.name, emp2.name as 상사
from employee emp1
inner join employee emp2
on emp1.superior_id = emp2.id;
// 내가 먼저 출력할 테이블을 먼저
// 내가 가지고 올 데이터를 보조 테이블이 뒤에

show databases;

use girlgroup_db;

select * from girl_group;

select * from song;

// song 테이블에 노랫가사 중 Give가 포함된 걸그룹의 전체 정보 출력
select s_id from song
where lyrics like '%Give%';

select * from girl_group
where hit_song_id = 105;

서브쿼리(subQuery)
select * from girl_group
where hit_song_id = (
select s_id from song
where lyrics like '%Give%'
);

select * from girl_group
where hit_song_id = (
select s_id from song
where lyrics like '%e%'
);

select * from song
where lyrics like '%e%';

select * from girl_group
where hit_song_id in (
select s_id from song
where lyrics like '%e%'
);
// 여러개 있으면 "in"을 넣어줘야한다

그룸이름, 데뷔이름, 노래 타이틀 출력
노래 가사에 e를 포함하는 자료 중에서 찾아보아요
select g.name, g.debut,
(select title from song
where lyrics like '%e%'
and title is not null
and g.hit_song_id = s_id) as hitsong
from girl_group as g;

select title from song
where lyrics like '%e%'
and g.hit_song_id = s_id

-------------------------

select abs(-100);
// 절댓값

select 14 % 3;
// 나머지

select floor(3.14);

select floor(rand()*6 +1)as value;
// 랜덤값

select * from song;

select * from song
order by rand()
limit 1;
// 랜덤으로 하나가 출력됨

올림(ceiling), 버림(floor), 반올림(round)

select ceiling(3.789);

select floor(3.789);

select round(3.789, 2);
// 소수 두번째자리까지 반올림

select round(123.456, -1);
// 정수치 한자리 반올림

select truncate(1234.5678, 2), truncate(1234.5678, -2);

select lyrics from song;

select length(lyrics) from song;
// 바이트 단위로 계산을 함

select char_length(lyrics) from song;
// 문자의 개수를 셀 때

select concat(title, ' ', lyrics) from song;
// 앞엔 타이틀 뒤엔 가사

select instr(lyrics, 'tell') from song;
// 가사 중에 tell을 포함하고 있는지
// 숫자로 나타냄 0은 포함하지 않음
// 뭔가를 찾는 함수

select format(123456789.1234, 2);
// 3자리 수마다 ,를 찍어줌
select format(123456789.1234, 2), 12345;
// 값이 오른쪽에 붙어있으면 숫자
// 값이 왼쪽에 붙어있으면 문자

select trim('                   data');
// 좌우의 공백을 제거하는 함수***

// 문자열 추출함수
select left ('장원영', 1);
// 왼쪽에 시작하는 문자를 1개만큼 가지고옴 => 장
select right ('장원영', 2);
// 오른쪽에서 시작하는 문자를 2개만큼 가지고옴 => 원영
select mid ('장원영', 2, 1);
// 장원영이라는 이름에서 두번째 글자에서부터 한글자 갖고와


851023-4455667

select left('851023-4455667, 6);
//생년월일 추출
select mid('851023-4455667', 8, 1);
//성별 필드만 추출

select lcase('aAvVAS'), ucase('abc');
// 왼쪽은 전부 소문자, 오른쪽은 다 대문자

select substring('abasdgs', 3, 2);
// mid와 유사

select substring_index('aa,bb,cc,dd', ',' , 2);
// ,가 두번째 나오는 것부터 다 날림 => aa, bb

test999@gmail.com
// test999만 출력하고 싶음
1. instr, left
select left('test999@gmail.com',
instr('test999@gmail.com','@')-1) as account;
2. substring_index
select substring_index('test999@gmail.com', '@', 1);

--------------------------------------------------------

create table test(addr varchar(200));

insert into test values(
'서울특별시 용산구 서빙고로 137 (용산동6가)'
);

도로명 : 서빙고로
select substring_index(substring_index(addr, ' ', 3), ' ', -1) as 도로명 from test;

동주소 : 용산동6가
select substring_index(substring_index(addr, '(', -1), ')', 1) as 동주소 from test;

----------------------------------------------------------------------------------

adddate, subdate, date_add, date_sub
                       ---
select addDate('2025-07-21', interval 31 day);
day, hour, miniute 도 가능

select curdate();

select curtime();

select sysdate();

=====================================

mysql -> test -> insert_date, DATE, (current_date) -> apply하면 curdatea()로 바뀜

======================================

select year(insert_date) from test;

select month(insert_date) from test;

select day(insert_date) from test;

----------------------------------------------

select * from girl_group;

select name, year(debut) from girl_group;

select year(debut) as 데뷔년도, count(name) as 팀수
from girl_group
group by 데뷔년도
order by 데뷔년도 asc;

select last_day(now());

timestampdiff(year, 만난 날, 오늘)
// 두 날짜간의 차를 계산

// 첫사랑을 만난 날 : 2023-06-01
// 1년째 : 2024-05-31
// 2년째 : 2025-05-31
// 오늘 : 2025-07-21

// 2년 1개월 21일

select timestampdiff(year, '2022-08-21', now()) as YEAR;
select timestampdiff(month, '2022-08-21', now()) as YEAR;
select timestampdiff(day, '2022-08-21', now()) as YEAR;

최근 1개월 전
오늘 2025-07-21 -> 2025-06-21
select now() + interval -1 month;

최근 1개월 범위 구해 봅니다.
select curdate() as 오늘, curdate() + interval -1 month as 한달전;

지난 달의 첫 날과 마지막 날을 구해봅니다.
curdate(), last_day(), interval

select last_day(now() + interval -1 month) as 지난달마지막;
select last_day(now() + interval -2 month)
 + interval +1 day as 지난달첫날;

select last_day(now() + interval -2 month)
 + interval +1 day as 지난달첫날,
last_day(now() + interval -1 month) as 지난달마지막;

girl_group 테이블에서 지금으로부터 15년 전 이후에 데뷔한
그룹의 이름과 데뷔일을 출력하시오.

select name, debut from girl_group
where year(debut) >= year(curdate() + interval - 15 year);