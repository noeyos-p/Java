객체지향 프로그래밍 문법

35장
1. 클래스 (= 설계도)
2. 오브젝트 (= new 가능한 것)
3. 인스턴스(오브젝트에 new를 붙이면 인스턴스가 됨) (= new 된 것)

-> Heap안에 쌓임

* new가 불가능한 것도 있음
-> 가구는 new가 불가능하고, class가 됨
-> 셀 수 있는 것은 오브젝트이고, 인스턴스로 만들 수 있음 (= 물질명사)
-> 셀 수 없는 것은 오브젝트가 아니고, 인스턴스로 만들 수 없음 (= 추상명사)

36장
- 클래스의 상태(행위)는 메서드에 의해서 변한다
- 상태(필드)를 구성할 때는 private 접근 제어자를 통해 외부 접근을 제어하고, 
- Getter와 Setter를 통해 상태값을 변경하도록 구성
-> 이렇게 해야 객체지향프로그램이라 할 수 있다.

37장
상속과 컴포지션
- 상속 -> extend 확장하다라는 의미가 더 적절함
: 상태, 행위를 물려받을 수 있다. !타입일치 가능!, 부모꺼를 갖다가 쓰기위해서 필요한 것
- 컴포지션 : 결합, 잘 만들어진 클래스를 재사용
- 특정한 부분만 특화되어 있는 구조
- 만들어둔 class를 불러와 사용하는 것이 컴포지션인듯함, 집에 세탁기 냉장고처럼 갖고들어와서 기능만 사용

상속은 부모와 연관성이 있어야하고,
컴포지션은 완제품을 가져다가 씀


oop(Object Oriented Programming)
= 객체지향 프로그래밍

상속은 extend라는 키워드를 사용하여 상속받음
재정의 Overriding or Override 라고 함

38장
상속받은 클래스가 다양한 성격을 갖는 클래스로 만들어지는 것 = 다형성
다형성은 누구를 받느냐가 중요함
부모를 바라보면 자식껄 먼저 바라보고
자식을 바라보면 자식만 봄
상속은 자식을 바라보면 자식꺼 내꺼 부모꺼 내꺼